<?xml version="1.0" encoding="utf-8"?>

<!-- VideoPlayer.mxml -->
<!-- Copyright (c) 2008-2009 MAP - MineApplicationProject. All Rights Reserved. -->
	
<mx:Window xmlns:mx="http://www.adobe.com/2006/mxml" title="NNDD - Player" layout="absolute" width="550" height="540" windowResize="windowResized(event)" 
		horizontalScrollPolicy="off" verticalScrollPolicy="off" closing="windowClosing(event)" close="windowClosed()"
		windowMove="windowMove(event)" resize="resizeNow(event)" updateComplete="updateComplete()" xmlns:ns1="*" windowComplete="windowComplete(event)"
		minWidth="300" minHeight="300" windowActivate="window1_windowActivateHandler(event)">

	<mx:Script>
		<![CDATA[
			import mx.containers.ViewStack;
			
			private var videoDisplayMenu:ContextMenu;
			private var videoDisplayMenuItem1:ContextMenuItem;
			private var videoDisplayMenuItem2:ContextMenuItem;
			private var videoDisplayMenuItem3:ContextMenuItem;
			private var videoDisplayMenuItem4:ContextMenuItem;
			private var videoDisplayMenuItem5:ContextMenuItem;
			private var videoDisplayMenuItem6:ContextMenuItem;
			private var videoDisplayMenuItem7:ContextMenuItem;
			private var videoDisplayMenuItem8:ContextMenuItem;
			private var videoDisplayMenuItem9:ContextMenuItem;
			private var videoDisplayMenuItem10:ContextMenuItem;
			private var videoDisplayMenuItem11:ContextMenuItem;
			private var videoDisplayMenuItem12:ContextMenuItem;
			private var videoDisplayMenuItem13:ContextMenuItem;
			private var videoDisplayMenuItem14:ContextMenuItem;
			
			private var _contextMenuShowing:Boolean = false;
			
			protected function textArea_tag_keyDownHandler(event:KeyboardEvent):void
			{
				playerController.play();
			}

			protected function canvas_video_back_creationCompleteHandler(event:FlexEvent):void
			{
				videoDisplayMenu = new ContextMenu();
				videoDisplayMenu.addEventListener(Event.DISPLAYING, videoDisplayContextMenuDisplayHandler);
				videoDisplayMenu.addEventListener(Event.SELECT, videoDisplayContextMenuSelectHandler);
				
				videoDisplayMenuItem10 = new ContextMenuItem(Message.L_BACK);
				videoDisplayMenuItem10.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, backClickEventHandler);
				
				videoDisplayMenuItem11 = new ContextMenuItem(Message.L_OPEN_FILE, true);
				videoDisplayMenuItem11.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, fileOpenClickEventHandler);
				
				videoDisplayMenuItem1 = new ContextMenuItem(Message.L_OPEN_DEFAULT_WEB_BROWSER, true);
				videoDisplayMenuItem1.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, button_goToWebClicked);
				
				videoDisplayMenuItem2 = new ContextMenuItem(Message.L_TWEET, true);
				videoDisplayMenuItem2.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, tweet);
				
				videoDisplayMenuItem3 = new ContextMenuItem(Message.L_ADD_HATENA_BOOKMARK, true);
				videoDisplayMenuItem3.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, addHatenaBookmark);
				
				videoDisplayMenuItem4 = new ContextMenuItem(Message.L_OPEN_NICOSOUND, true);
				videoDisplayMenuItem4.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, openNicoSound);
				
				videoDisplayMenuItem7 = new ContextMenuItem(Message.L_OPEN_NICOMIMI, false)
				videoDisplayMenuItem7.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, openNicomimi);
				
				videoDisplayMenuItem5 = new ContextMenuItem(Message.L_FULL_OR_NOMAL, true);
				videoDisplayMenuItem5.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, changeFullClickEventHandler);
				
				videoDisplayMenuItem6 = new ContextMenuItem(Message.L_COMMENT_SHOW_OR_HIDE);
				videoDisplayMenuItem6.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, changeShowCommentClickEventHandler);
				
				videoDisplayMenuItem9 = new ContextMenuItem(Message.L_NOMAL_OR_WIDE);
				videoDisplayMenuItem9.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, changeWideMode);
				videoDisplayMenuItem9.addEventListener(Event.DISPLAYING, function(event:Event):void{
					if(videoInfoView != null){
						if(videoInfoView.isResizePlayerEachPlay && 
							videoInfoView.selectedResizeType == VideoInfoView.RESIZE_TYPE_NICO){
							videoDisplayMenuItem9.enabled = true;
						}else{
							videoDisplayMenuItem9.enabled = false;
						}
					}
				});
				
				videoDisplayMenuItem8 = new ContextMenuItem(Message.L_INFOVIEW_SHOW_OR_HIDE, true);
				videoDisplayMenuItem8.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, changeShowVideoInfoView);
				
				videoDisplayMenuItem12 = new ContextMenuItem(Message.L_COPY_VIDEO_URL, true);
				videoDisplayMenuItem12.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, copyVideoUrl);
				videoDisplayMenuItem13 = new ContextMenuItem(Message.L_COPY_VIDEO_URL_WITH_TITLE, false);
				videoDisplayMenuItem13.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, copyVideoUrlWithTitle);
				
				videoDisplayMenuItem14 = new ContextMenuItem(Message.L_RELOAD_VIDEO, true);
				videoDisplayMenuItem14.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, videoReload);
				
				videoDisplayMenu.customItems.push(videoDisplayMenuItem10, videoDisplayMenuItem11, videoDisplayMenuItem1, videoDisplayMenuItem2, 
					videoDisplayMenuItem3, videoDisplayMenuItem4, videoDisplayMenuItem7, videoDisplayMenuItem5, videoDisplayMenuItem6, 
					videoDisplayMenuItem9 ,videoDisplayMenuItem8, videoDisplayMenuItem12, videoDisplayMenuItem13, videoDisplayMenuItem14);
				
				canvas_video_back.contextMenu = videoDisplayMenu;
			}
			
			protected function videoDisplayContextMenuDisplayHandler(event:Event):void{
				this._contextMenuShowing = true;
			}
			
			protected function videoDisplayContextMenuSelectHandler(event:Event):void{
				this._contextMenuShowing = false;
			}
			
			protected function mouseLeaveEventHandler(event:Event):void{
				this._contextMenuShowing = false;
			}

			protected function mouseUpEventHandler(event:Event):void{
				this._contextMenuShowing = false;
			}
			
			public function get contextMenuShowing():Boolean{
				return this._contextMenuShowing;
			}

			protected function canvas_videoPlayer_creationCompleteHandler(event:FlexEvent):void
			{
				this.stage.addEventListener(Event.ACTIVATE, mouseUpEventHandler);
				this.stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpEventHandler);
			}


			protected function window1_windowActivateHandler(event:Event):void
			{
				if(this.videoInfoView != null && (this.videoInfoView as Window).visible){
					if(this.stage.displayState != StageDisplayState.FULL_SCREEN_INTERACTIVE){
						showVideoInfoView();
					}
				}
			}


			protected function canvas_video_clickHandler(event:MouseEvent):void
			{
				canvas_video.setFocus();
			}

		]]>
	</mx:Script>
	<mx:Script>
		<![CDATA[// from VideoSourceSelectionWindow.mxml

			protected function button_play_clickHandler(event:Event):void
			{
				var url:String = textInput_source.text;
				if(url != null && url.length > 0){

					var checker:ShortUrlChecker = new ShortUrlChecker();
					if (checker.isShortUrl(url))
					{
						logManager.addLog("短縮URLを展開中...:" + url);
						checker.addEventListener(Event.COMPLETE, function(event:Event):void
						{
							var url:String = checker.url;
							var videoId:String = PathMaker.getVideoID(url);
							if(videoId != null){
								url = "http://www.nicovideo.jp/watch/" + videoId;
								Application.application.playMovie(url, -1);
							}
						});
						checker.addEventListener(IOErrorEvent.IO_ERROR, function(event:Event):void
						{
							logManager.addLog(Message.M_SHORT_URL_EXPANSION_FAIL + ":" + event);
							Alert.show(Message.M_SHORT_URL_EXPANSION_FAIL, Message.M_ERROR);
						});
						checker.expansion(url);
						return;
					}
					
					try{
						var file:File = new File(url);
						if(file.exists){
							url = file.url;
						}
					}catch(error:Error){
						
						var videoId:String = PathMaker.getVideoID(url);
						if(videoId != null){
							url = "http://www.nicovideo.jp/watch/" + videoId;
						}
						
					}
					
					Application.application.playMovie(url, -1);
				}
			}


			protected function button_open_clickHandler(event:MouseEvent):void
			{
				var directory:File = File.documentsDirectory;
				
				directory.browseForOpen("動画を開く",  [new FileFilter("Video", "*.mp4;*.flv;*.swf")]);
				
				// ファイル選択イベントのリスナを登録
				directory.addEventListener(Event.SELECT, function(event:Event):void{
					// イベントのターゲットが選択されたファイルなので、`File`型に変換
					var file:File = (event.target as File);
					
					textInput_source.text = file.nativePath;
					
				});
			}


			protected function textInput_source_focusInHandler(event:FocusEvent):void
			{
				var textInput:TextInput = TextInput(event.currentTarget);
				textInput.selectionBeginIndex = 0;
				textInput.selectionEndIndex = textInput.text.length;
			}

		]]>
	</mx:Script>


	<mx:Script source="org/mineap/NNDD/view/VideoPlayer.as" />
	
	<mx:Canvas width="100%" x="0" height="100%" y="0" id="canvas_videoPlayer" creationComplete="canvas_videoPlayer_creationCompleteHandler(event)" verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<mx:TextArea id="textArea_tag" minHeight="10" height="30" htmlText="{textAreaTagProvider}" link="tagTextAreaLinkClikced(event)" backgroundColor="#e5e5e5" fontSize="11" left="5" top="5" right="5" 
				editable="false" focusEnabled="false" keyDown="textArea_tag_keyDownHandler(event)"/>
		<mx:VBox left="5" top="58" bottom="35" right="5" resize="resizeNow(event)" id="vbox_videoPlayer" >
			<mx:Canvas width="100%" height="15%" backgroundColor="#969696" id="canvas_nicowari" horizontalScrollPolicy="off" verticalScrollPolicy="off" mouseMove="mouseMove(event)">
			</mx:Canvas>
			<mx:Canvas id="canvas_video_back" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" mouseMove="mouseMove(event)" 
					   updateComplete="updateComplete()" focusEnabled="true" creationComplete="canvas_video_back_creationCompleteHandler(event)">
				
				<mx:Canvas width="100%" height="100%" id="canvas_video" 
						   horizontalScrollPolicy="off" verticalScrollPolicy="off" 
						   backgroundColor="#000000" doubleClickEnabled="true" 
						   doubleClick="panelDoubleClicked(event)" 
						   nativeDragDrop="canvasVideoDroped(event)" 
						   nativeDragEnter="canvasVideoDragEnter(event)" 
						   resize="videoCanvasResize(event)" updateComplete="updateComplete()" 
						   toolTip="ここに動画ファイルをドロップすると動画を再生できます。"
						   click="canvas_video_clickHandler(event)">
				</mx:Canvas>
				<ns1:VideoController id="videoController" backgroundAlpha="0.7" 
									 alpha="1.0" backgroundColor="#FFFFFF" 
									 borderThickness="2" borderStyle="solid" 
									 horizontalCenter="0" bottom="40">
				</ns1:VideoController>
				<mx:Label id="label_playSourceStatus" rollOut="rollOut(event)" rollOver="rollOver(event)" color="#FFFFFF" right="10" top="10" initialize="label_playSourceStatusInit(event)"  fontWeight="bold"/>
				<mx:Label id="label_economyStatus" rollOut="rollOut(event)" rollOver="rollOver(event)" color="#FFFFFF" initialize="label_economyStatusInit(event)"  fontWeight="bold" right="10" top="30"/>
				<mx:Text color="#FFFFFF" fontWeight="bold" id="label_downloadStatus" left="10" top="10"/>
				
				<mx:HBox left="10" bottom="5" backgroundColor="#FFFFFF" cornerRadius="5" alpha="1.0" right="10" backgroundAlpha="0.0" id="hbox_displayButtons" initialize="hbox_displayLabelsInit(event)">
					<mx:LinkButton label="x1" color="#FFFFFF" height="17" toolTip="標準サイズ" rollOut="rollOut(event)" rollOver="rollOver(event)" id="button_x1" click="changeWindowSizeRatio(1.0, true)"/>
					<mx:LinkButton label="x2" color="#FFFFFF" height="17" toolTip="２倍のサイズ" rollOut="rollOut(event)" rollOver="rollOver(event)" id="button_x2" click="changeWindowSizeRatio(2.0, true)"/>
					<mx:LinkButton id="button_ChangeFullScreen" rollOut="rollOut(event)" rollOver="rollOver(event)" label="FULL" click="changeFullButtonClicked(event)" toolTip="フルスクリーン表示" color="#FFFFFF" height="17"/>
					<mx:LinkButton id="button_ChangeShowInfoView" rollOut="rollOut(event)" rollOver="rollOver(event)" label="INFO" click="changeShowInfoViewButtonClicked(event)" toolTip="Info表示" color="#FFFFFF" height="17"/>
					<mx:Label width="100%"/>
					<mx:LinkButton id="button_ChangeRepeat" rollOut="rollOut(event)" rollOver="rollOver(event)" label="Repeat" click="changeRepateButtonClicked(event)" toolTip="リピートの有無を切り替え" color="#FFFFFF" height="17" creationComplete="changeRepeatCreationComplete(event)"/>
					<mx:LinkButton id="button_ChangeShowComment" rollOut="rollOut(event)" rollOver="rollOver(event)" label="Comment" click="changeShowCommentButtonClicked(event)" toolTip="コメントの表示/非表示を切り替え" height="17" creationComplete="changeShowCommentCreationComplete(event)" color="#FFFFFF"/>
				</mx:HBox>
				
			</mx:Canvas>
			
			<mx:Canvas x="71" y="366" width="100%" height="60" id="canvas_under" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<ns1:VideoController left="0" top="0" right="0" id="videoController_under" height="60" backgroundAlpha="0.8" backgroundColor="#FFFFFF">
				</ns1:VideoController>
			</mx:Canvas>
		</mx:VBox>
		<mx:Canvas left="5" right="5" bottom="5" height="22">
			<mx:Label fontSize="11" left="0" top="0" bottom="0" width="60" text="URL/File" />
			<mx:TextInput left="60" right="5" top="0" bottom="0" id="textInput_source" 
				  		enter="button_play_clickHandler(event)" 
				  		focusIn="textInput_source_focusInHandler(event)"/>
		</mx:Canvas>
	</mx:Canvas>
</mx:Window>
